/* Generated By:JavaCC: Do not edit this line. lexico_csharpTokenManager.java */
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;

/** Token Manager. */
public class lexico_csharpTokenManager implements lexico_csharpConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active1 & 0x400000000000L) != 0L)
            return 40;
         if ((active0 & 0xfffffffffe380000L) != 0L || (active1 & 0x7ffffffffL) != 0L)
         {
            jjmatchedKind = 99;
            return 9;
         }
         return -1;
      case 1:
         if ((active0 & 0xe0bff9fffa380000L) != 0L || (active1 & 0x7ffffffffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 99;
               jjmatchedPos = 1;
            }
            return 9;
         }
         if ((active0 & 0x1f40060004000000L) != 0L)
            return 9;
         return -1;
      case 2:
         if ((active0 & 0xe18000000000000L) != 0L || (active1 & 0x800409L) != 0L)
            return 9;
         if ((active0 & 0xe0a7fdfffa380000L) != 0L || (active1 & 0x7ff7ffbf6L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 99;
               jjmatchedPos = 2;
            }
            return 9;
         }
         return -1;
      case 3:
         if ((active0 & 0x8c97e5fd22100000L) != 0L || (active1 & 0x6fd5ffbf6L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 3;
            return 9;
         }
         if ((active0 & 0x60201802d8280000L) != 0L || (active1 & 0x102200000L) != 0L)
            return 9;
         return -1;
      case 4:
         if ((active0 & 0x8c91c5e402000000L) != 0L || (active1 & 0x2b91fabf6L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 4;
            return 9;
         }
         if ((active0 & 0x6201920100000L) != 0L || (active1 & 0x444405000L) != 0L)
            return 9;
         return -1;
      case 5:
         if ((active0 & 0x8c9141e402000000L) != 0L || (active1 & 0x2880102d4L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 5;
            return 9;
         }
         if ((active0 & 0x840000000000L) != 0L || (active1 & 0x311ea922L) != 0L)
            return 9;
         return -1;
      case 6:
         if ((active0 & 0x8c80412002000000L) != 0L || (active1 & 0x208010294L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 6;
            return 9;
         }
         if ((active0 & 0x1100c400000000L) != 0L || (active1 & 0x80000040L) != 0L)
            return 9;
         return -1;
      case 7:
         if ((active0 & 0x8400000000000000L) != 0L || (active1 & 0x8010080L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 7;
            return 9;
         }
         if ((active0 & 0x880412002000000L) != 0L || (active1 & 0x200000214L) != 0L)
            return 9;
         return -1;
      case 8:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 99;
            jjmatchedPos = 8;
            return 9;
         }
         if ((active0 & 0x8400000000000000L) != 0L || (active1 & 0x8000080L) != 0L)
            return 9;
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 120;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x2000000000000L, 0x0L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x7fe00L, 0x0L, 0x0L);
      case 38:
         jjmatchedKind = 121;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 133);
      case 41:
         return jjStopAtPos(0, 134);
      case 42:
         return jjStopAtPos(0, 109);
      case 43:
         jjmatchedKind = 107;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4L);
      case 44:
         return jjStopAtPos(0, 139);
      case 45:
         jjmatchedKind = 108;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x18L);
      case 46:
         jjmatchedKind = 140;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000L);
      case 47:
         return jjStartNfaWithStates_0(0, 110, 40);
      case 58:
         jjmatchedKind = 126;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000L);
      case 59:
         return jjStopAtPos(0, 141);
      case 60:
         jjmatchedKind = 114;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000000L, 0x0L);
      case 61:
         jjmatchedKind = 111;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1000000000000L, 0x2L);
      case 62:
         jjmatchedKind = 115;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000000L, 0x0L);
      case 63:
         jjmatchedKind = 125;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000000000L, 0x1L);
      case 91:
         return jjStopAtPos(0, 137);
      case 93:
         return jjStopAtPos(0, 138);
      case 94:
         return jjStopAtPos(0, 123);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x6000000L, 0x0L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x78000000L, 0x0L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3f80000000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7c000000000L, 0x0L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xf80000000000L, 0x0L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1f000000100000L, 0x0L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1fc0000000000000L, 0x0L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x0L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000000000200000L, 0x1L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1eL, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1e0L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xe00L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1ff000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80000L, 0x1e00000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7e000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x380000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 135);
      case 124:
         jjmatchedKind = 122;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 136);
      case 126:
         return jjStopAtPos(0, 124);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 118);
         break;
      case 43:
         if ((active2 & 0x4L) != 0L)
            return jjStopAtPos(1, 130);
         break;
      case 45:
         if ((active2 & 0x8L) != 0L)
            return jjStopAtPos(1, 131);
         break;
      case 46:
         if ((active1 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(1, 127);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000L);
      case 58:
         if ((active2 & 0x4000L) != 0L)
            return jjStopAtPos(1, 142);
         break;
      case 61:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 112);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 113);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStopAtPos(1, 116);
         else if ((active1 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 117);
         break;
      case 62:
         if ((active2 & 0x2L) != 0L)
            return jjStopAtPos(1, 129);
         else if ((active2 & 0x10L) != 0L)
            return jjStopAtPos(1, 132);
         break;
      case 63:
         if ((active2 & 0x1L) != 0L)
            return jjStopAtPos(1, 128);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000188100000L, active1, 0x20L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000L, active1, 0x1002L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c00000ac00L, active1, 0x2e01L, active2, 0L);
      case 102:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 54, 9);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x600000000L, active1, 0x400604000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x3000000000200L, active1, 0x82008000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x4080800004000L, active1, 0x4000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0xe00100000000000L, active1, 0x18000000L, active2, 0L);
      case 111:
         if ((active0 & 0x20000000000L) != 0L)
         {
            jjmatchedKind = 41;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x6038043010000000L, active1, 0x300000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x20081000L, active1, 0x8000c0L, active2, 0L);
      case 115:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(1, 26, 9);
         else if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 60, 9);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x60000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xf0000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x240000L, active1, 0x108L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L, active1, 0x10L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000L, active1, 0x100000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000L, active1, 0L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000L, active1, 0x1000000L, active2, 0L);
      case 124:
         if ((active1 & 0x80000000000000L) != 0L)
            return jjStopAtPos(1, 119);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active2 & 0x8000L) != 0L)
            return jjStopAtPos(2, 143);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0xa00010000L, active1, 0x32200L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x100L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000004000000000L, active1, 0x8000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x200420021000L, active1, 0x14L, active2, 0L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(2, 9);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 74, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0x540300040L, active2, 0L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000300400L, active1, 0x200000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000000000L, active1, 0L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4001003000042800L, active1, 0x2000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000010000000L, active1, 0x4004080L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x80400000000000L, active1, 0x1000000L, active2, 0L);
      case 114:
         if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000008000L, active1, 0x804c0020L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8008a000000L, active1, 0x10000000L, active2, 0L);
      case 116:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 67, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0xc20800140000000L, active1, 0x800L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x140000080000L, active1, 0L, active2, 0L);
      case 119:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(2, 64, 9);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(2, 87, 9);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000L, active2, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x5008020000000L, active1, 0x210000020L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x500000000L, active1, 0x10000L);
      case 100:
         if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 96, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x42800L, active1, 0x200L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(3, 19, 9);
         else if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 9);
         else if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 9);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 9);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x8c12810000000000L, active1, 0x1008002L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0L);
      case 103:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 62, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000L, active1, 0L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0x40000L);
      case 107:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 61, 9);
         break;
      case 108:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 21, 9);
         else if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(3, 28, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x80400000000000L, active1, 0x400002100L);
      case 109:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 44, 9);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000004000L, active1, 0x44000000L);
      case 111:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x20400000L);
      case 114:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(3, 33, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x18000L, active1, 0x4014L);
      case 115:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(3, 85, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x1800100400L, active1, 0L);
      case 116:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 9);
         return jjMoveStringLiteralDfa4_0(active0, 0x2002000000L, active1, 0x80121080L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80800L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x44L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x180002L);
      case 100:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 9);
         break;
      case 101:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(4, 10);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(4, 14);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(4, 20, 9);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 9);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 98, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x40000L, active1, 0x8002080L);
      case 102:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000L);
      case 103:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 9);
         else if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000L, active1, 0L);
      case 104:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 32, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x80402000021800L, active1, 0x20100L);
      case 107:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(4, 29, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0x10000L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x1040000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0x20L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000L, active1, 0x40000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0x1008200L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0xc00800002002000L, active1, 0x20000810L);
      case 115:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 9);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 45, 9);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 50, 9);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 78, 9);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0x80000000L);
      case 119:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(4, 86, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x14002000000L, active1, 0x80010000L);
      case 99:
         if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 72, 9);
         else if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x90400000000000L, active1, 0x8000080L);
      case 100:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(5, 77, 9);
         break;
      case 101:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 9);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x400002000L, active1, 0L);
      case 102:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(5, 11);
         else if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(5, 18);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 9);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000000L, active1, 0L);
      case 103:
         if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(5, 82, 9);
         break;
      case 104:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(5, 84, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0x200000010L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x1008000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 9);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(5, 75, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0x800002000020000L, active1, 0x200L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0L);
      case 114:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(5, 15);
         break;
      case 115:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 9);
         break;
      case 116:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(5, 65, 9);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 9);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 9);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x44L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x8c00000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000L, active1, 0L);
      case 100:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(6, 34, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10L);
      case 101:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(6, 17);
         else if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 70, 9);
         break;
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000L, active1, 0L);
      case 104:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 9);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x80400000000000L, active1, 0L);
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000L);
      case 108:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 9);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 95, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200010200L);
      case 110:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(6, 12);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L);
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 39, 9);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000L, active1, 0x80L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x8400000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 9);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 40, 9);
         else if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(7, 68, 9);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(7, 97, 9);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000080L);
      case 103:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(7, 16);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000L, active1, 0L);
      case 108:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 9);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x10000L);
      case 114:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 66, 9);
         break;
      case 116:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(7, 25, 9);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 46, 9);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 55, 9);
         break;
      case 121:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(7, 73, 9);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(8, 71, 9);
         else if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(8, 91, 9);
         break;
      case 101:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 58, 9);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 63, 9);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000L, active1, 0x10000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(9, 80, 9);
         break;
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(9, 13);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 61;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 40:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 47;
                  else if (curChar == 42)
                     jjCheckNAddTwoStates(41, 42);
                  if (curChar == 47)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(46);
                  }
                  break;
               case 0:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 23)
                        kind = 23;
                     jjCheckNAddStates(0, 4);
                  }
                  else if (curChar == 48)
                     jjAddStates(5, 6);
                  else if (curChar == 47)
                     jjAddStates(7, 9);
                  else if (curChar == 34)
                     jjCheckNAddStates(10, 13);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjCheckNAddStates(0, 4);
                  break;
               case 9:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 10:
                  if (curChar == 34)
                     jjCheckNAddStates(14, 16);
                  break;
               case 11:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(14, 16);
                  break;
               case 12:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 13:
                  if (curChar == 34 && kind > 105)
                     kind = 105;
                  break;
               case 15:
                  if (curChar == 34)
                     jjCheckNAddStates(10, 13);
                  break;
               case 16:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 17:
                  if (curChar == 34 && kind > 106)
                     kind = 106;
                  break;
               case 19:
                  if ((0x1008400000000L & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(17, 21);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 29:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 36:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(22, 26);
                  break;
               case 37:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(27, 31);
                  break;
               case 38:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 39:
                  if (curChar == 47)
                     jjAddStates(7, 9);
                  break;
               case 41:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 42:
                  if (curChar == 42)
                     jjAddStates(32, 33);
                  break;
               case 43:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 44:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 45:
                  if (curChar != 47)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(46);
                  break;
               case 46:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(46);
                  break;
               case 47:
                  if (curChar != 47)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjCheckNAdd(48);
                  break;
               case 49:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 50:
                  if (curChar == 48)
                     jjAddStates(5, 6);
                  break;
               case 52:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 22)
                     kind = 22;
                  jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjAddStates(34, 38);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 99)
                        kind = 99;
                     jjCheckNAdd(9);
                  }
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 2:
                  if ((0x20000000200000L & l) == 0L)
                     break;
                  if (kind > 23)
                     kind = 23;
                  jjAddStates(39, 41);
                  break;
               case 3:
                  if ((0x100000001000L & l) != 0L && kind > 23)
                     kind = 23;
                  break;
               case 4:
                  if (curChar == 76 && kind > 23)
                     kind = 23;
                  break;
               case 5:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 108 && kind > 23)
                     kind = 23;
                  break;
               case 7:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
               case 9:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 99)
                     kind = 99;
                  jjCheckNAdd(9);
                  break;
               case 11:
                  jjAddStates(14, 16);
                  break;
               case 14:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 16:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 18:
                  if (curChar == 92)
                     jjAddStates(42, 43);
                  break;
               case 19:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 20:
                  if (curChar == 92)
                     jjAddStates(44, 46);
                  break;
               case 21:
                  if (curChar == 120)
                     jjCheckNAdd(22);
                  break;
               case 22:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(17, 21);
                  break;
               case 23:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 24:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 26:
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(10, 13);
                  break;
               case 28:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 29:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 33:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 34:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 41:
               case 43:
                  jjCheckNAddTwoStates(41, 42);
                  break;
               case 46:
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 51:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 53:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(34, 38);
                  break;
               case 55:
                  if ((0x20000000200000L & l) == 0L)
                     break;
                  if (kind > 24)
                     kind = 24;
                  jjCheckNAddStates(47, 49);
                  break;
               case 56:
                  if ((0x100000001000L & l) != 0L && kind > 24)
                     kind = 24;
                  break;
               case 57:
                  if (curChar == 76 && kind > 24)
                     kind = 24;
                  break;
               case 58:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if (curChar == 108 && kind > 24)
                     kind = 24;
                  break;
               case 60:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(14, 16);
                  break;
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(10, 13);
                  break;
               case 41:
               case 43:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(41, 42);
                  break;
               case 46:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 8)
                     kind = 8;
                  jjstateSet[jjnewStateCnt++] = 48;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 61 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   1, 2, 3, 5, 7, 51, 53, 40, 45, 49, 16, 17, 18, 20, 11, 12, 
   13, 16, 22, 17, 18, 20, 16, 17, 18, 20, 37, 16, 38, 17, 18, 20, 
   43, 44, 54, 55, 56, 58, 60, 3, 5, 7, 19, 36, 21, 23, 28, 56, 
   58, 60, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\43\151\146", 
"\43\145\154\163\145", "\43\145\156\144\151\146", "\43\162\145\147\151\157\156", 
"\43\145\156\144\162\145\147\151\157\156", "\43\154\151\156\145", "\43\145\162\162\157\162", 
"\43\167\141\162\156\151\156\147", "\43\144\145\146\151\156\145", "\43\165\156\144\145\146", "\164\162\165\145", 
"\146\141\154\163\145", "\156\165\154\154", null, null, null, "\141\142\163\164\162\141\143\164", 
"\141\163", "\142\141\163\145", "\142\157\157\154", "\142\162\145\141\153", 
"\142\171\164\145", "\143\141\163\145", "\143\141\164\143\150", "\143\150\141\162", 
"\143\150\145\143\153\145\144", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\143\151\155\141\154", "\144\145\146\141\165\154\164", 
"\144\145\154\145\147\141\164\145", "\144\157", "\144\157\165\142\154\145", "\145\154\163\145", 
"\145\156\165\155", "\145\166\145\156\164", "\145\170\160\154\151\143\151\164", 
"\145\170\164\145\162\156", "\146\151\156\141\154\154\171", "\146\151\170\145\144", 
"\146\154\157\141\164", "\146\157\162", "\146\157\162\145\141\143\150", "\147\157\164\157", 
"\151\146", "\151\155\160\154\151\143\151\164", "\151\156", "\151\156\164", 
"\151\156\164\145\162\146\141\143\145", "\151\156\164\145\162\156\141\154", "\151\163", "\154\157\143\153", 
"\154\157\156\147", "\156\141\155\145\163\160\141\143\145", "\156\145\167", 
"\157\142\152\145\143\164", "\157\160\145\162\141\164\157\162", "\157\165\164", 
"\157\166\145\162\162\151\144\145", "\160\141\162\141\155\163", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\141\144\157\156\154\171", 
"\162\145\146", "\162\145\164\165\162\156", "\163\142\171\164\145", 
"\163\145\141\154\145\144", "\163\150\157\162\164", "\163\151\172\145\157\146", 
"\163\164\141\143\153\141\154\154\157\143", "\163\164\141\164\151\143", "\163\164\162\151\156\147", 
"\163\164\162\165\143\164", "\163\167\151\164\143\150", "\164\150\151\163", "\164\150\162\157\167", 
"\164\162\171", "\164\171\160\145\157\146", "\165\151\156\164", "\165\154\157\156\147", 
"\165\156\143\150\145\143\153\145\144", "\165\156\163\141\146\145", "\165\163\150\157\162\164", 
"\165\163\151\156\147", "\166\151\162\164\165\141\154", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", null, null, null, null, null, null, null, null, "\53", 
"\55", "\52", "\57", "\75", "\75\75", "\41\75", "\74", "\76", "\74\75", "\76\75", 
"\46\46", "\174\174", "\41", "\46", "\174", "\136", "\176", "\77", "\72", "\77\56", 
"\77\77", "\75\76", "\53\53", "\55\55", "\55\76", "\50", "\51", "\173", "\175", "\133", 
"\135", "\54", "\56", "\73", "\72\72", "\56\56\56", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xfffffffffffffe01L, 0xfffffe0fffffffffL, 0xffffL, 
};
static final long[] jjtoSkip = {
   0x1feL, 0x0L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[61];
static private final int[] jjstateSet = new int[122];
static protected char curChar;
/** Constructor. */
public lexico_csharpTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public lexico_csharpTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 61; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   tokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}

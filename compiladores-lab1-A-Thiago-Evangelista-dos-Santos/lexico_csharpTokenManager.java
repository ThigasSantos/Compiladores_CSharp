/* Generated By:JavaCC: Do not edit this line. lexico_csharpTokenManager.java */
import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;

/** Token Manager. */
public class lexico_csharpTokenManager implements lexico_csharpConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x9000000000000L) != 0L)
            return 14;
         if ((active0 & 0xffffffffe0700000L) != 0L || (active1 & 0xffffffffffffffffL) != 0L || (active2 & 0x1fL) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 0;
            return 246;
         }
         if ((active2 & 0x40000L) != 0L)
            return 134;
         return -1;
      case 1:
         if ((active0 & 0xf400600440000000L) != 0L || (active1 & 0x210160000000001L) != 0L)
            return 246;
         if ((active0 & 0xbff9ffba0700000L) != 0L || (active1 & 0xfdefe9fffffffffeL) != 0L || (active2 & 0x1fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 182;
               jjmatchedPos = 1;
            }
            return 246;
         }
         return -1;
      case 2:
         if ((active0 & 0xe180000000000000L) != 0L || (active1 & 0x4052008008004090L) != 0L || (active2 & 0x2L) != 0L)
            return 246;
         if ((active0 & 0xa7fdfffa0700000L) != 0L || (active1 & 0xbdadef7ff7ffbf6eL) != 0L || (active2 & 0x1dL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 182;
               jjmatchedPos = 2;
            }
            return 246;
         }
         return -1;
      case 3:
         if ((active0 & 0xc97e5fd220200000L) != 0L || (active1 & 0xbd8cef6fd5ffbf68L) != 0L || (active2 & 0x19L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 3;
            return 246;
         }
         if ((active0 & 0x201802d80500000L) != 0L || (active1 & 0x31001022000006L) != 0L || (active2 & 0x4L) != 0L)
            return 246;
         return -1;
      case 4:
         if ((active0 & 0x62019200200000L) != 0L || (active1 & 0x80d4444050000L) != 0L || (active2 & 0x19L) != 0L)
            return 246;
         if ((active0 & 0xc91c5e4020000000L) != 0L || (active1 & 0xbd84e22b91fabf68L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 4;
            return 246;
         }
         return -1;
      case 5:
         if ((active0 & 0x8400000000000L) != 0L || (active1 & 0x3084800311ea9220L) != 0L)
            return 246;
         if ((active0 & 0xc9141e4020000000L) != 0L || (active1 & 0x8d00622880102d48L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 5;
            return 246;
         }
         return -1;
      case 6:
         if ((active0 & 0x1100c4000000000L) != 0L || (active1 & 0xd00400800000400L) != 0L)
            return 246;
         if ((active0 & 0xc804120020000000L) != 0L || (active1 & 0x8000222080102948L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 6;
            return 246;
         }
         return -1;
      case 7:
         if ((active0 & 0x8804120020000000L) != 0L || (active1 & 0x2000002140L) != 0L)
            return 246;
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x8000220080100808L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 7;
            return 246;
         }
         return -1;
      case 8:
         if ((active0 & 0x4000000000000000L) != 0L || (active1 & 0x8000020080000808L) != 0L)
            return 246;
         if ((active1 & 0x200000100000L) != 0L)
         {
            jjmatchedKind = 182;
            jjmatchedPos = 8;
            return 246;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         {
         jjmatchedKind = 156;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x200000L);
      case 35:
         return jjMoveStringLiteralDfa1_0(0xfff00L, 0x0L, 0x0L);
      case 38:
         {
         jjmatchedKind = 157;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000L);
      case 40:
         return jjStopAtPos(0, 169);
      case 41:
         return jjStopAtPos(0, 170);
      case 42:
         return jjStopAtPos(0, 145);
      case 43:
         {
         jjmatchedKind = 143;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000000L);
      case 44:
         return jjStopAtPos(0, 175);
      case 45:
         {
         jjmatchedKind = 144;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x18000000000L);
      case 46:
         {
         jjmatchedKind = 176;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000000000L);
      case 47:
         return jjStartNfaWithStates_0(0, 146, 134);
      case 58:
         {
         jjmatchedKind = 162;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x4000000000000L);
      case 59:
         return jjStopAtPos(0, 177);
      case 60:
         {
         jjmatchedKind = 150;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1000000L);
      case 61:
         {
         jjmatchedKind = 147;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000100000L);
      case 62:
         {
         jjmatchedKind = 151;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x2000000L);
      case 63:
         {
         jjmatchedKind = 161;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x1800000000L);
      case 91:
         return jjStopAtPos(0, 173);
      case 93:
         return jjStopAtPos(0, 174);
      case 94:
         return jjStopAtPos(0, 159);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x60000000L, 0xf8000000000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x780000000L, 0x100000000000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x3f800000000L, 0x0L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x7c0000000000L, 0x600000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0xf800000000000L, 0x800000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1f0000000200000L, 0x1000000000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x200000000000000L, 0xe000000000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0xfc00000000000000L, 0x10000000000001L, 0x0L);
      case 106:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000000006L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x180000000000018L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000000000001e0L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000001e00L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000000e000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x6000000001ff0000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x100000L, 0x1e000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000007e0000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3800000000L, 0x3L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000000000L, 0xcL);
      case 121:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x10L);
      case 123:
         return jjStopAtPos(0, 171);
      case 124:
         {
         jjmatchedKind = 158;
         jjmatchedPos = 0;
         }
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x8000000L);
      case 125:
         return jjStopAtPos(0, 172);
      case 126:
         return jjStopAtPos(0, 160);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active2 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 154);
         break;
      case 43:
         if ((active2 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 166);
         break;
      case 45:
         if ((active2 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 167);
         break;
      case 46:
         if ((active2 & 0x800000000L) != 0L)
            return jjStopAtPos(1, 163);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x8000000000000L);
      case 58:
         if ((active2 & 0x4000000000000L) != 0L)
            return jjStopAtPos(1, 178);
         break;
      case 61:
         if ((active2 & 0x100000L) != 0L)
            return jjStopAtPos(1, 148);
         else if ((active2 & 0x200000L) != 0L)
            return jjStopAtPos(1, 149);
         else if ((active2 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 152);
         else if ((active2 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 153);
         break;
      case 62:
         if ((active2 & 0x2000000000L) != 0L)
            return jjStopAtPos(1, 165);
         else if ((active2 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 168);
         break;
      case 63:
         if ((active2 & 0x1000000000L) != 0L)
            return jjStopAtPos(1, 164);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1880200000L, active1, 0x880000000000208L, active2, 0x3L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000L, active1, 0x10020L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L, active1, 0x8000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x1c000002b800L, active1, 0x704220000002e010L, active2, 0L);
      case 102:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 58, 246);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x6000000000L, active1, 0x4006040000L, active2, 0xcL);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x30000000000400L, active1, 0x820080000L, active2, 0x10L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x40808000004000L, active1, 0x4010040000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000000000000L, active1, 0L, active2, 0L);
      case 110:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 121, 246);
         return jjMoveStringLiteralDfa2_0(active0, 0xe001000000040000L, active1, 0x8010000180000000L, active2, 0L);
      case 111:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x380430100000000L, active1, 0x120003000000006L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000L, active1, 0x40L, active2, 0L);
      case 113:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x800000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x200110000L, active1, 0x409000008000c00L, active2, 0L);
      case 115:
         if ((active0 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 30;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(1, 64, 246);
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x60600000000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xf00000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x400200L, active1, 0x1080L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0x100L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80001000000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active1 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 108;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000L, active1, 0x400010000000L, active2, 0L);
      case 124:
         if ((active2 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 155);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 46:
         if ((active2 & 0x8000000000000L) != 0L)
            return jjStopAtPos(2, 179);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0xa000000000L, active1, 0x80000322000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0x20080000002L, active2, 0L);
      case 100:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 103, 246);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x2004200010100L, active1, 0x140L, active2, 0x1cL);
      case 102:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(2, 10);
         else if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(2, 78, 246);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0x20015403000400L, active2, 0L);
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000601800L, active1, 0x2000002000000000L, active2, 0x1L);
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x9080000000000008L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x10030000022200L, active1, 0x400020000004L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000100000000L, active1, 0xd000040040800L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x804000000000000L, active1, 0x10000000L, active2, 0L);
      case 114:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 2;
         }
         else if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(2, 129, 246);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000088000L, active1, 0x800000804c00200L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8008a0000000L, active1, 0x200100000000L, active2, 0L);
      case 116:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(2, 71, 246);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 113, 246);
         else if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 118, 246);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 126, 246);
         return jjMoveStringLiteralDfa3_0(active0, 0xc208001400000000L, active1, 0x110000000008000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x1400000140000L, active1, 0x800000000000L, active2, 0L);
      case 119:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(2, 68, 246);
         break;
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000000000L, active1, 0L, active2, 0L);
      case 121:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 91, 246);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x40000010000L, active2, 0L);
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x50080200080000L, active1, 0x8000c12100000200L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000L, active1, 0x4000000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x5000000000L, active1, 0x200000100000L, active2, 0L);
      case 100:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 100, 246);
         return jjMoveStringLiteralDfa4_0(active0, 0x22200L, active1, 0x2000L, active2, 0L);
      case 101:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(3, 20, 246);
         else if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(3, 31, 246);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 246);
         else if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 246);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 47, 246);
         return jjMoveStringLiteralDfa4_0(active0, 0xc128100000000000L, active1, 0x2480020010080028L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L, active1, 0L, active2, 0L);
      case 103:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 66, 246);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000L, active1, 0L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80000000L, active2, 0L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000800L, active1, 0x80000400000L, active2, 0L);
      case 107:
         if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 246);
         break;
      case 108:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(3, 22, 246);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 246);
         return jjMoveStringLiteralDfa4_0(active0, 0x804000000040000L, active1, 0x4000021000L, active2, 0x10L);
      case 109:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 48, 246);
         else if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 112, 246);
         break;
      case 110:
         if ((active1 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 117, 246);
         else if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(3, 130, 246);
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000004000L, active1, 0x100040440000000L, active2, 0L);
      case 111:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 57, 246);
         else if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 116, 246);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000204000000L, active2, 0L);
      case 114:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 37, 246);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L, active1, 0x40140L, active2, 0x8L);
      case 115:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(3, 89, 246);
         return jjMoveStringLiteralDfa4_0(active0, 0x18000201000L, active1, 0L, active2, 0L);
      case 116:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(3, 93, 246);
         return jjMoveStringLiteralDfa4_0(active0, 0x20020000000L, active1, 0x800000801210800L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000000808000L, active2, 0x1L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000000L, active1, 0x4000000000440L, active2, 0L);
      case 99:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 106, 246);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000001800020L, active2, 0L);
      case 100:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 53, 246);
         else if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(4, 132, 246);
         break;
      case 101:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(4, 12);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(4, 14);
         else if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 246);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(4, 80, 246);
         else if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 102, 246);
         else if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 128, 246);
         else if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(4, 131, 246);
         return jjMoveStringLiteralDfa5_0(active0, 0x200L, active1, 0x200080020800L, active2, 0L);
      case 102:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(4, 11);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x100000000L, active2, 0L);
      case 103:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(4, 94, 246);
         else if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(4, 98, 246);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000080000L, active1, 0L, active2, 0L);
      case 104:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 36, 246);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x804020000012100L, active1, 0x800000000201000L, active2, 0L);
      case 107:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 246);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000L, active1, 0x100000L, active2, 0L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x10400000040000L, active1, 0x800000000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0x400000000200L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000020000400000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0x80000010082000L, active2, 0L);
      case 112:
         if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 115, 246);
         break;
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0xc008000020020000L, active1, 0x400000200008100L, active2, 0L);
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 39, 246);
         else if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 104, 246);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8L, active2, 0L);
      case 116:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 246);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 49, 246);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 54, 246);
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 82, 246);
         else if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 107, 246);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L, active1, 0x100000800000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000000000000L, active2, 0L);
      case 119:
         if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(4, 90, 246);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
static private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x140020040000L, active1, 0x8800000800100000L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x400000000000000L);
      case 99:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(5, 76, 246);
         else if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(5, 85, 246);
         return jjMoveStringLiteralDfa6_0(active0, 0x904000000000000L, active1, 0x80000800L);
      case 100:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(5, 81, 246);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000L);
      case 101:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 246);
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(5, 96, 246);
         else if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 124, 246);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000020000L, active1, 0L);
      case 102:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(5, 9);
         else if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(5, 13);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 246);
         else if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(5, 92, 246);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 119, 246);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L);
      case 103:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 246);
         break;
      case 104:
         if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 246);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x402000000100L);
      case 108:
         if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 114, 246);
         return jjMoveStringLiteralDfa6_0(active0, 0x10080000000000L, active1, 0x100000000000000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x80000L, active1, 0L);
      case 110:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 51, 246);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(5, 79, 246);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000020000000100L, active1, 0x200000002000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8L);
      case 114:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(5, 15);
         break;
      case 115:
         if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(5, 73, 246);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 111, 246);
         break;
      case 116:
         if ((active1 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(5, 69, 246);
         else if ((active1 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(5, 87, 246);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(5, 97, 246);
         else if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 125, 246);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x440L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(6, 19);
         return jjMoveStringLiteralDfa7_0(active0, 0xc000000000000000L, active1, 0x8L);
      case 98:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L, active1, 0L);
      case 99:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 110, 246);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0L);
      case 100:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 246);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200000000100L);
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(6, 8);
         else if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(6, 74, 246);
         break;
      case 103:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000L, active1, 0x8000000000000000L);
      case 104:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 56, 246);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x804000000000000L, active1, 0x20000000000L);
      case 107:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000L);
      case 108:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 246);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(6, 99, 246);
         else if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 120, 246);
         else if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 123, 246);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2000102000L);
      case 110:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(6, 16);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40L);
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 246);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0x800L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 52, 246);
         else if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 122, 246);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0x8L);
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 41, 246);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 44, 246);
         else if ((active1 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(7, 72, 246);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 101, 246);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8000000080000800L);
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000L, active1, 0x200000000000L);
      case 108:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 63, 246);
         return jjMoveStringLiteralDfa8_0(active0, 0x40000L, active1, 0x100000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x20000000000L);
      case 114:
         if ((active1 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(7, 70, 246);
         break;
      case 116:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 246);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 50, 246);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 59, 246);
         break;
      case 121:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 77, 246);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(8, 75, 246);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(8, 95, 246);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 127, 246);
         break;
      case 101:
         if ((active0 & 0x40000L) != 0L)
            return jjStopAtPos(8, 18);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 62, 246);
         else if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(8, 67, 246);
         break;
      case 103:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 105, 246);
         break;
      case 110:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x200000000000L);
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000L, active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1, 0L);
}
static private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 99:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(9, 84, 246);
         break;
      case 103:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 109, 246);
         break;
      case 110:
         if ((active0 & 0x20000L) != 0L)
            return jjStopAtPos(9, 17);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1, 0L);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   //int[] nextStates; // not used
   int startsAt = 0;
   jjnewStateCnt = 246;
   int i = 1;
   jjstateSet[0] = startState;
   //int j; // not used
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  else if (curChar == 36)
                     jjAddStates(9, 10);
                  else if (curChar == 47)
                     jjAddStates(11, 12);
                  else if (curChar == 34)
                     jjCheckNAddStates(13, 16);
                  else if (curChar == 39)
                     jjAddStates(17, 19);
                  else if (curChar == 46)
                     jjCheckNAdd(14);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                     jjCheckNAddStates(20, 27);
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 26)
                        kind = 26;
                     jjAddStates(28, 29);
                  }
                  break;
               case 134:
                  if (curChar == 47)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(140);
                  }
                  else if (curChar == 42)
                     jjCheckNAddTwoStates(135, 136);
                  break;
               case 246:
               case 64:
               case 70:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 182)
                     kind = 182;
                  jjCheckNAddTwoStates(64, 65);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddStates(20, 27);
                  break;
               case 13:
                  if (curChar == 46)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(30, 33);
                  break;
               case 17:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(34, 36);
                  break;
               case 21:
                  if (curChar == 39)
                     jjAddStates(17, 19);
                  break;
               case 22:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if (curChar == 39 && kind > 138)
                     kind = 138;
                  break;
               case 25:
                  if ((0x1008400000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 23);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
               case 41:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 42:
                  if (curChar == 34)
                     jjCheckNAddStates(13, 16);
                  break;
               case 43:
                  if ((0xfffffffbfffffbffL & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 45:
                  if ((0x1008400000000L & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 46:
                  if (curChar == 34 && kind > 140)
                     kind = 140;
                  break;
               case 49:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(37, 41);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
               case 62:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 57:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 67:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 69:
               case 78:
               case 113:
               case 121:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(70);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 81:
               case 87:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 182)
                     kind = 182;
                  jjCheckNAddTwoStates(81, 82);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 85:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 86:
               case 95:
               case 100:
               case 108:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(87);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(0, 8);
                  break;
               case 124:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(42, 44);
                  break;
               case 126:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(45, 47);
                  break;
               case 128:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(129);
                  break;
               case 129:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(48, 50);
                  break;
               case 132:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(51, 53);
                  break;
               case 133:
                  if (curChar == 47)
                     jjAddStates(11, 12);
                  break;
               case 135:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(135, 136);
                  break;
               case 136:
                  if (curChar == 42)
                     jjAddStates(54, 55);
                  break;
               case 137:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(135, 136);
                  break;
               case 138:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               case 139:
                  if (curChar != 47)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(140);
                  break;
               case 140:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(140);
                  break;
               case 141:
                  if (curChar != 48)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjAddStates(28, 29);
                  break;
               case 144:
                  if ((0x3000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjAddStates(56, 63);
                  break;
               case 157:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjAddStates(64, 71);
                  break;
               case 169:
                  if (curChar == 34)
                     jjCheckNAddStates(72, 74);
                  break;
               case 170:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(72, 74);
                  break;
               case 171:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 172:
                  if (curChar == 34 && kind > 139)
                     kind = 139;
                  break;
               case 173:
                  if (curChar == 34)
                     jjCheckNAddStates(75, 80);
                  break;
               case 174:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(75, 80);
                  break;
               case 175:
                  if (curChar == 34)
                     jjCheckNAdd(173);
                  break;
               case 181:
                  jjAddStates(81, 82);
                  break;
               case 183:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddStates(83, 88);
                  break;
               case 184:
                  if (curChar == 34)
                     jjCheckNAddStates(83, 88);
                  break;
               case 185:
                  if (curChar == 34)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 190:
                  if (curChar == 34 && kind > 142)
                     kind = 142;
                  break;
               case 191:
                  if (curChar == 36)
                     jjCheckNAdd(173);
                  break;
               case 192:
                  if (curChar == 36)
                     jjAddStates(9, 10);
                  break;
               case 193:
                  if (curChar == 34)
                     jjCheckNAddStates(89, 95);
                  break;
               case 194:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(89, 95);
                  break;
               case 196:
                  if ((0x1008400000000L & l) != 0L)
                     jjCheckNAddStates(89, 95);
                  break;
               case 202:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjAddStates(96, 97);
                  break;
               case 204:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(98, 104);
                  break;
               case 206:
                  if ((0x1008400000000L & l) != 0L)
                     jjCheckNAddStates(98, 104);
                  break;
               case 211:
                  if (curChar == 34 && kind > 141)
                     kind = 141;
                  break;
               case 214:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(105, 112);
                  break;
               case 216:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 217:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 218:
               case 227:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(219);
                  break;
               case 219:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(98, 104);
                  break;
               case 221:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 222:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 223:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 224;
                  break;
               case 224:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 225:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 226:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 228:
                  if (curChar == 34)
                     jjCheckNAddStates(98, 104);
                  break;
               case 231:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(113, 120);
                  break;
               case 233:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 234:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 235:
               case 244:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAdd(236);
                  break;
               case 236:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(89, 95);
                  break;
               case 238:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 239:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 240:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 241:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 242:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 243:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 182)
                        kind = 182;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  else if (curChar == 64)
                     jjAddStates(121, 122);
                  else if (curChar == 92)
                     jjAddStates(123, 124);
                  if (curChar == 64)
                     jjAddStates(125, 126);
                  break;
               case 246:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 182)
                        kind = 182;
                     jjCheckNAddTwoStates(64, 65);
                  }
                  else if (curChar == 92)
                     jjAddStates(127, 128);
                  break;
               case 1:
                  if (curChar == 95)
                     jjAddStates(129, 130);
                  break;
               case 3:
                  if ((0x20000000200000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(4);
                  break;
               case 4:
                  if ((0x100000001000L & l) != 0L && kind > 26)
                     kind = 26;
                  break;
               case 5:
                  if (curChar == 85)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 6:
                  if (curChar != 76)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 7:
                  if (curChar != 108)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 8:
                  if (curChar == 117)
                     jjCheckNAddTwoStates(6, 7);
                  break;
               case 9:
                  if (curChar == 76)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 10:
                  if (curChar != 85)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 11:
                  if (curChar != 117)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 12:
                  if (curChar == 108)
                     jjCheckNAddTwoStates(10, 11);
                  break;
               case 15:
                  if (curChar == 95)
                     jjAddStates(131, 132);
                  break;
               case 16:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 19:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(19, 18);
                  break;
               case 20:
                  if ((0x205000002050L & l) != 0L && kind > 28)
                     kind = 28;
                  break;
               case 22:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 24:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 25:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 26:
                  if (curChar == 92)
                     jjAddStates(133, 135);
                  break;
               case 27:
                  if (curChar == 120)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(28, 23);
                  break;
               case 29:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 30:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 31:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 32:
               case 41:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(33);
                  break;
               case 33:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 34:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 35;
                  break;
               case 35:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 36:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 37;
                  break;
               case 37:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 38;
                  break;
               case 38:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 39:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 40:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 44:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 45:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 47:
                  if (curChar == 92)
                     jjAddStates(136, 138);
                  break;
               case 48:
                  if (curChar == 120)
                     jjCheckNAdd(49);
                  break;
               case 49:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(37, 41);
                  break;
               case 50:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 51:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 52:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 53:
               case 62:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(54);
                  break;
               case 54:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(13, 16);
                  break;
               case 55:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 56:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 57:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 58:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 59:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 60;
                  break;
               case 60:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 61:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 63:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 182)
                     kind = 182;
                  jjCheckNAddTwoStates(64, 65);
                  break;
               case 64:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 182)
                     kind = 182;
                  jjCheckNAddTwoStates(64, 65);
                  break;
               case 65:
                  if (curChar == 92)
                     jjAddStates(127, 128);
                  break;
               case 66:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 67:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 68:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 69:
               case 78:
               case 113:
               case 121:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(70);
                  break;
               case 70:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 182)
                     kind = 182;
                  jjCheckNAddTwoStates(64, 65);
                  break;
               case 71:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 72:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 73:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 74:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 75:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 76:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 77:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 79:
                  if (curChar == 64)
                     jjAddStates(125, 126);
                  break;
               case 80:
               case 81:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 182)
                     kind = 182;
                  jjCheckNAddTwoStates(81, 82);
                  break;
               case 82:
                  if (curChar == 92)
                     jjAddStates(139, 140);
                  break;
               case 83:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 84:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 85:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 86:
               case 95:
               case 100:
               case 108:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(87);
                  break;
               case 87:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 182)
                     kind = 182;
                  jjCheckNAddTwoStates(81, 82);
                  break;
               case 88:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 89:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 90:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 91:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 92:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 93:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 94:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 96:
                  if (curChar == 92)
                     jjAddStates(141, 142);
                  break;
               case 97:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               case 98:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 99:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 100;
                  break;
               case 101:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 102;
                  break;
               case 102:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 103;
                  break;
               case 103:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 104:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 106:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 107;
                  break;
               case 107:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 109:
                  if (curChar == 92)
                     jjAddStates(123, 124);
                  break;
               case 110:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 111:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 112:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 114:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 115:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 116:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 117:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 118;
                  break;
               case 118:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 119:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 120:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 95)
                     jjAddStates(143, 144);
                  break;
               case 125:
                  if (curChar == 95)
                     jjAddStates(145, 146);
                  break;
               case 127:
                  if ((0x2000000020L & l) != 0L)
                     jjCheckNAddTwoStates(128, 129);
                  break;
               case 130:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(130, 129);
                  break;
               case 131:
                  if (curChar == 95)
                     jjAddStates(147, 148);
                  break;
               case 135:
               case 137:
                  jjCheckNAddTwoStates(135, 136);
                  break;
               case 140:
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 142:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAddTwoStates(143, 144);
                  break;
               case 143:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(143, 144);
                  break;
               case 145:
                  if ((0x20000000200000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAdd(146);
                  break;
               case 146:
                  if ((0x100000001000L & l) != 0L && kind > 25)
                     kind = 25;
                  break;
               case 147:
                  if (curChar == 85)
                     jjCheckNAddTwoStates(148, 149);
                  break;
               case 148:
                  if (curChar != 76)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddTwoStates(145, 146);
                  break;
               case 149:
                  if (curChar != 108)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddTwoStates(145, 146);
                  break;
               case 150:
                  if (curChar == 117)
                     jjCheckNAddTwoStates(148, 149);
                  break;
               case 151:
                  if (curChar == 76)
                     jjCheckNAddTwoStates(152, 153);
                  break;
               case 152:
                  if (curChar != 85)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddTwoStates(145, 146);
                  break;
               case 153:
                  if (curChar != 117)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddTwoStates(145, 146);
                  break;
               case 154:
                  if (curChar == 108)
                     jjCheckNAddTwoStates(152, 153);
                  break;
               case 155:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAddTwoStates(156, 157);
                  break;
               case 156:
                  if (curChar == 95)
                     jjCheckNAddTwoStates(156, 157);
                  break;
               case 157:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddStates(64, 71);
                  break;
               case 158:
                  if ((0x20000000200000L & l) == 0L)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAdd(159);
                  break;
               case 159:
                  if ((0x100000001000L & l) != 0L && kind > 27)
                     kind = 27;
                  break;
               case 160:
                  if (curChar == 85)
                     jjCheckNAddTwoStates(161, 162);
                  break;
               case 161:
                  if (curChar != 76)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddTwoStates(158, 159);
                  break;
               case 162:
                  if (curChar != 108)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddTwoStates(158, 159);
                  break;
               case 163:
                  if (curChar == 117)
                     jjCheckNAddTwoStates(161, 162);
                  break;
               case 164:
                  if (curChar == 76)
                     jjCheckNAddTwoStates(165, 166);
                  break;
               case 165:
                  if (curChar != 85)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddTwoStates(158, 159);
                  break;
               case 166:
                  if (curChar != 117)
                     break;
                  if (kind > 27)
                     kind = 27;
                  jjCheckNAddTwoStates(158, 159);
                  break;
               case 167:
                  if (curChar == 108)
                     jjCheckNAddTwoStates(165, 166);
                  break;
               case 168:
                  if (curChar == 64)
                     jjAddStates(121, 122);
                  break;
               case 170:
                  jjAddStates(72, 74);
                  break;
               case 174:
                  if ((0xf7ffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(75, 80);
                  break;
               case 176:
                  if (curChar == 123)
                     jjCheckNAddStates(75, 80);
                  break;
               case 177:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if (curChar == 125)
                     jjCheckNAddStates(75, 80);
                  break;
               case 179:
                  if (curChar == 125)
                     jjstateSet[jjnewStateCnt++] = 178;
                  break;
               case 180:
                  if (curChar == 123)
                     jjCheckNAddTwoStates(181, 182);
                  break;
               case 181:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(181, 182);
                  break;
               case 182:
               case 188:
                  if (curChar == 125)
                     jjCheckNAddStates(83, 88);
                  break;
               case 183:
                  if ((0xf7ffffffffffffffL & l) != 0L)
                     jjCheckNAddStates(83, 88);
                  break;
               case 186:
                  if (curChar == 123)
                     jjCheckNAddStates(83, 88);
                  break;
               case 187:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 189:
                  if (curChar == 125)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 194:
                  if ((0xf7ffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(89, 95);
                  break;
               case 195:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 196;
                  break;
               case 196:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(89, 95);
                  break;
               case 197:
                  if (curChar == 123)
                     jjCheckNAddStates(89, 95);
                  break;
               case 198:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 197;
                  break;
               case 199:
                  if (curChar == 125)
                     jjCheckNAddStates(89, 95);
                  break;
               case 200:
                  if (curChar == 125)
                     jjstateSet[jjnewStateCnt++] = 199;
                  break;
               case 201:
                  if (curChar == 123)
                     jjCheckNAddTwoStates(202, 203);
                  break;
               case 202:
                  if ((0xdfffffffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(202, 203);
                  break;
               case 203:
               case 209:
                  if (curChar == 125)
                     jjCheckNAddStates(98, 104);
                  break;
               case 204:
                  if ((0xf7ffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(98, 104);
                  break;
               case 205:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 206;
                  break;
               case 206:
                  if ((0x54404610000000L & l) != 0L)
                     jjCheckNAddStates(98, 104);
                  break;
               case 207:
                  if (curChar == 123)
                     jjCheckNAddStates(98, 104);
                  break;
               case 208:
                  if (curChar == 123)
                     jjstateSet[jjnewStateCnt++] = 207;
                  break;
               case 210:
                  if (curChar == 125)
                     jjstateSet[jjnewStateCnt++] = 209;
                  break;
               case 212:
                  if (curChar == 92)
                     jjAddStates(149, 152);
                  break;
               case 213:
                  if (curChar == 120)
                     jjCheckNAdd(214);
                  break;
               case 214:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(105, 112);
                  break;
               case 215:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 216;
                  break;
               case 216:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 217;
                  break;
               case 217:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 218;
                  break;
               case 218:
               case 227:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(219);
                  break;
               case 219:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(98, 104);
                  break;
               case 220:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 221;
                  break;
               case 221:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 222;
                  break;
               case 222:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 223;
                  break;
               case 223:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 224;
                  break;
               case 224:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 225;
                  break;
               case 225:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 226;
                  break;
               case 226:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 227;
                  break;
               case 229:
                  if (curChar == 92)
                     jjAddStates(153, 156);
                  break;
               case 230:
                  if (curChar == 120)
                     jjCheckNAdd(231);
                  break;
               case 231:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(113, 120);
                  break;
               case 232:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 233;
                  break;
               case 233:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 234;
                  break;
               case 234:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 235;
                  break;
               case 235:
               case 244:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAdd(236);
                  break;
               case 236:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(89, 95);
                  break;
               case 237:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 238;
                  break;
               case 238:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 239;
                  break;
               case 239:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 240;
                  break;
               case 240:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 241;
                  break;
               case 241:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 242;
                  break;
               case 242:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 243;
                  break;
               case 243:
                  if ((0x7e0000007eL & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 244;
                  break;
               case 245:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 22:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 43:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(13, 16);
                  break;
               case 135:
               case 137:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(135, 136);
                  break;
               case 140:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 170:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(72, 74);
                  break;
               case 174:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(75, 80);
                  break;
               case 181:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(81, 82);
                  break;
               case 183:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(83, 88);
                  break;
               case 194:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(89, 95);
                  break;
               case 202:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(96, 97);
                  break;
               case 204:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(98, 104);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 246 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   123, 124, 13, 125, 126, 127, 131, 132, 20, 193, 245, 134, 139, 43, 44, 46, 
   47, 22, 24, 26, 1, 2, 3, 4, 5, 8, 9, 12, 142, 155, 15, 14, 
   16, 20, 19, 18, 20, 43, 44, 49, 46, 47, 123, 124, 13, 125, 126, 127, 
   130, 129, 20, 131, 132, 20, 137, 138, 143, 144, 145, 146, 147, 150, 151, 154, 
   156, 157, 158, 159, 160, 163, 164, 167, 170, 171, 172, 174, 175, 177, 179, 180, 
   190, 181, 182, 180, 183, 185, 187, 189, 190, 194, 195, 198, 200, 201, 211, 229, 
   202, 203, 201, 204, 205, 208, 210, 211, 212, 201, 204, 205, 214, 208, 210, 211, 
   212, 194, 195, 231, 198, 200, 201, 211, 229, 169, 191, 110, 114, 80, 96, 66, 
   71, 1, 2, 15, 14, 27, 29, 34, 48, 50, 55, 83, 88, 97, 101, 123, 
   124, 125, 126, 131, 132, 213, 215, 220, 228, 230, 232, 237, 193, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\43\144\145\146\151\156\145", 
"\43\165\156\144\145\146", "\43\151\146", "\43\145\154\151\146", "\43\145\154\163\145", 
"\43\145\156\144\151\146", "\43\154\151\156\145", "\43\145\162\162\157\162", 
"\43\162\145\147\151\157\156", "\43\145\156\144\162\145\147\151\157\156", 
"\43\156\165\154\154\141\142\154\145", "\43\160\162\141\147\155\141", "\164\162\165\145", "\146\141\154\163\145", 
"\156\165\154\154", null, null, null, null, null, null, "\141\142\163\164\162\141\143\164", 
"\141\163", "\142\141\163\145", "\142\157\157\154", "\142\162\145\141\153", 
"\142\171\164\145", "\143\141\163\145", "\143\141\164\143\150", "\143\150\141\162", 
"\143\150\145\143\153\145\144", "\143\154\141\163\163", "\143\157\156\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\143\151\155\141\154", "\144\145\146\141\165\154\164", 
"\144\145\154\145\147\141\164\145", "\144\157", "\144\157\165\142\154\145", "\145\154\163\145", 
"\145\156\165\155", "\145\166\145\156\164", "\145\170\160\154\151\143\151\164", 
"\145\170\164\145\162\156", "\146\151\156\141\154\154\171", "\146\151\170\145\144", 
"\146\154\157\141\164", "\146\157\162", "\146\157\162\145\141\143\150", "\147\157\164\157", 
"\151\146", "\151\155\160\154\151\143\151\164", "\151\156", "\151\156\164", 
"\151\156\164\145\162\146\141\143\145", "\151\156\164\145\162\156\141\154", "\151\163", "\154\157\143\153", 
"\154\157\156\147", "\156\141\155\145\163\160\141\143\145", "\156\145\167", 
"\157\142\152\145\143\164", "\157\160\145\162\141\164\157\162", "\157\165\164", 
"\157\166\145\162\162\151\144\145", "\160\141\162\141\155\163", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\141\144\157\156\154\171", 
"\162\145\146", "\162\145\164\165\162\156", "\163\142\171\164\145", 
"\163\145\141\154\145\144", "\163\150\157\162\164", "\163\151\172\145\157\146", 
"\163\164\141\143\153\141\154\154\157\143", "\163\164\141\164\151\143", "\163\164\162\151\156\147", 
"\163\164\162\165\143\164", "\163\167\151\164\143\150", "\164\150\151\163", "\164\150\162\157\167", 
"\164\162\171", "\164\171\160\145\157\146", "\165\151\156\164", "\165\154\157\156\147", 
"\165\156\143\150\145\143\153\145\144", "\165\156\163\141\146\145", "\165\163\150\157\162\164", 
"\165\163\151\156\147", "\166\151\162\164\165\141\154", "\166\157\151\144", 
"\166\157\154\141\164\151\154\145", "\167\150\151\154\145", "\141\144\144", "\141\154\151\141\163", 
"\141\163\143\145\156\144\151\156\147", "\141\163\171\156\143", "\141\167\141\151\164", "\142\171", 
"\144\145\163\143\145\156\144\151\156\147", "\144\171\156\141\155\151\143", "\145\161\165\141\154\163", 
"\146\162\157\155", "\147\145\164", "\147\154\157\142\141\154", "\147\162\157\165\160", 
"\151\156\164\157", "\152\157\151\156", "\154\145\164", "\156\141\155\145\157\146", 
"\156\157\164\156\165\154\154", "\157\156", "\157\162\144\145\162\142\171", "\160\141\162\164\151\141\154", 
"\162\145\155\157\166\145", "\163\145\154\145\143\164", "\163\145\164", 
"\165\156\155\141\156\141\147\145\144", "\166\141\154\165\145", "\166\141\162", "\167\150\145\156", 
"\167\150\145\162\145", "\171\151\145\154\144", null, null, null, null, null, null, null, null, null, 
null, "\53", "\55", "\52", "\57", "\75", "\75\75", "\41\75", "\74", "\76", "\74\75", 
"\76\75", "\46\46", "\174\174", "\41", "\46", "\174", "\136", "\176", "\77", "\72", 
"\77\56", "\77\77", "\75\76", "\53\53", "\55\55", "\55\76", "\50", "\51", "\173", 
"\175", "\133", "\135", "\54", "\56", "\73", "\72\72", "\56\56\56", null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xfffffffffe7fff01L, 0xffffffffffffffffL, 0x4ffffffffffc1fL, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 0x0L, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[246];
static private final int[] jjstateSet = new int[492];
static StringBuffer image;
static int jjimageLen;
static int lengthOfMatch;
static protected char curChar;
/** Constructor. */
public lexico_csharpTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public lexico_csharpTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 246; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String tokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   if (jjmatchedPos < 0)
   {
      if (image == null)
         tokenImage = "";
      else
         tokenImage = image.toString();
      beginLine = endLine = input_stream.getBeginLine();
      beginColumn = endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      tokenImage = (im == null) ? input_stream.GetImage() : im;
      beginLine = input_stream.getBeginLine();
      beginColumn = input_stream.getBeginColumn();
      endLine = input_stream.getEndLine();
      endColumn = input_stream.getEndColumn();
   }
   t = Token.newToken(jjmatchedKind, tokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  //int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 26;
   jjmatchedPos = -1;
   curPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static int[] jjemptyLineNo = new int[1];
static int[] jjemptyColNo = new int[1];
static boolean[] jjbeenHere = new boolean[1];
static void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 0 :
         break;
      case 8 :
         break;
      case 9 :
         break;
      case 10 :
         break;
      case 11 :
         break;
      case 12 :
         break;
      case 13 :
         break;
      case 14 :
         break;
      case 15 :
         break;
      case 16 :
         break;
      case 17 :
         break;
      case 18 :
         break;
      case 19 :
         break;
      case 20 :
         break;
      case 21 :
         break;
      case 22 :
         break;
      case 25 :
         break;
      case 26 :
         if (jjmatchedPos == -1)
         {
            if (jjbeenHere[0] &&
                jjemptyLineNo[0] == input_stream.getBeginLine() && 
                jjemptyColNo[0] == input_stream.getBeginColumn())
               throw new TokenMgrError(("Error: Bailing out of infinite loop caused by repeated empty string matches at line " + input_stream.getBeginLine() + ", column " + input_stream.getBeginColumn() + "."), TokenMgrError.LOOP_DETECTED);
            jjemptyLineNo[0] = input_stream.getBeginLine();
            jjemptyColNo[0] = input_stream.getBeginColumn();
            jjbeenHere[0] = true;
         }
         break;
      case 27 :
         break;
      case 28 :
         break;
      case 29 :
         break;
      case 30 :
         break;
      case 31 :
         break;
      case 32 :
         break;
      case 33 :
         break;
      case 34 :
         break;
      case 35 :
         break;
      case 36 :
         break;
      case 37 :
         break;
      case 38 :
         break;
      case 39 :
         break;
      case 40 :
         break;
      case 41 :
         break;
      case 42 :
         break;
      case 43 :
         break;
      case 44 :
         break;
      case 45 :
         break;
      case 46 :
         break;
      case 47 :
         break;
      case 48 :
         break;
      case 49 :
         break;
      case 50 :
         break;
      case 51 :
         break;
      case 52 :
         break;
      case 53 :
         break;
      case 54 :
         break;
      case 55 :
         break;
      case 56 :
         break;
      case 57 :
         break;
      case 58 :
         break;
      case 59 :
         break;
      case 60 :
         break;
      case 61 :
         break;
      case 62 :
         break;
      case 63 :
         break;
      case 64 :
         break;
      case 65 :
         break;
      case 66 :
         break;
      case 67 :
         break;
      case 68 :
         break;
      case 69 :
         break;
      case 70 :
         break;
      case 71 :
         break;
      case 72 :
         break;
      case 73 :
         break;
      case 74 :
         break;
      case 75 :
         break;
      case 76 :
         break;
      case 77 :
         break;
      case 78 :
         break;
      case 79 :
         break;
      case 80 :
         break;
      case 81 :
         break;
      case 82 :
         break;
      case 83 :
         break;
      case 84 :
         break;
      case 85 :
         break;
      case 86 :
         break;
      case 87 :
         break;
      case 88 :
         break;
      case 89 :
         break;
      case 90 :
         break;
      case 91 :
         break;
      case 92 :
         break;
      case 93 :
         break;
      case 94 :
         break;
      case 95 :
         break;
      case 96 :
         break;
      case 97 :
         break;
      case 98 :
         break;
      case 99 :
         break;
      case 100 :
         break;
      case 101 :
         break;
      case 102 :
         break;
      case 103 :
         break;
      case 104 :
         break;
      case 105 :
         break;
      case 106 :
         break;
      case 107 :
         break;
      case 108 :
         break;
      case 109 :
         break;
      case 110 :
         break;
      case 111 :
         break;
      case 112 :
         break;
      case 113 :
         break;
      case 114 :
         break;
      case 115 :
         break;
      case 116 :
         break;
      case 117 :
         break;
      case 118 :
         break;
      case 119 :
         break;
      case 120 :
         break;
      case 121 :
         break;
      case 122 :
         break;
      case 123 :
         break;
      case 124 :
         break;
      case 125 :
         break;
      case 126 :
         break;
      case 127 :
         break;
      case 128 :
         break;
      case 129 :
         break;
      case 130 :
         break;
      case 131 :
         break;
      case 132 :
         break;
      case 138 :
         break;
      case 139 :
         break;
      case 140 :
         break;
      case 141 :
         break;
      case 142 :
         break;
      case 143 :
         break;
      case 144 :
         break;
      case 145 :
         break;
      case 146 :
         break;
      case 147 :
         break;
      case 148 :
         break;
      case 149 :
         break;
      case 150 :
         break;
      case 151 :
         break;
      case 152 :
         break;
      case 153 :
         break;
      case 154 :
         break;
      case 155 :
         break;
      case 156 :
         break;
      case 157 :
         break;
      case 158 :
         break;
      case 159 :
         break;
      case 160 :
         break;
      case 161 :
         break;
      case 162 :
         break;
      case 163 :
         break;
      case 164 :
         break;
      case 165 :
         break;
      case 166 :
         break;
      case 167 :
         break;
      case 168 :
         break;
      case 169 :
         break;
      case 170 :
         break;
      case 171 :
         break;
      case 172 :
         break;
      case 173 :
         break;
      case 174 :
         break;
      case 175 :
         break;
      case 176 :
         break;
      case 177 :
         break;
      case 178 :
         break;
      case 179 :
         break;
      case 182 :
         break;
      default : 
         break;
   }
}
static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}

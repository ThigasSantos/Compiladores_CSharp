/* Generated By:JavaCC: Do not edit this line. lexico_csharpConstants.java */

/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface lexico_csharpConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int COMMENT_BLOCK = 6;
  /** RegularExpression Id. */
  int LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int XML_COMMENT = 8;
  /** RegularExpression Id. */
  int TRUE = 9;
  /** RegularExpression Id. */
  int FALSE = 10;
  /** RegularExpression Id. */
  int NULL = 11;
  /** RegularExpression Id. */
  int BINARY_INTEGER = 12;
  /** RegularExpression Id. */
  int DECIMAL_INTEGER = 13;
  /** RegularExpression Id. */
  int OCTAL_INTEGER = 14;
  /** RegularExpression Id. */
  int HEXADECIMAL_INTEGER = 15;
  /** RegularExpression Id. */
  int ABSTRACT = 16;
  /** RegularExpression Id. */
  int AS = 17;
  /** RegularExpression Id. */
  int BASE = 18;
  /** RegularExpression Id. */
  int BOOL = 19;
  /** RegularExpression Id. */
  int BREAK = 20;
  /** RegularExpression Id. */
  int BYTE = 21;
  /** RegularExpression Id. */
  int CASE = 22;
  /** RegularExpression Id. */
  int CATCH = 23;
  /** RegularExpression Id. */
  int CHAR = 24;
  /** RegularExpression Id. */
  int CHECKED = 25;
  /** RegularExpression Id. */
  int CLASS = 26;
  /** RegularExpression Id. */
  int CONST = 27;
  /** RegularExpression Id. */
  int CONTINUE = 28;
  /** RegularExpression Id. */
  int DECIMAL = 29;
  /** RegularExpression Id. */
  int KWDEFAULT = 30;
  /** RegularExpression Id. */
  int DELEGATE = 31;
  /** RegularExpression Id. */
  int DO = 32;
  /** RegularExpression Id. */
  int DOUBLE = 33;
  /** RegularExpression Id. */
  int ELSE = 34;
  /** RegularExpression Id. */
  int ENUM = 35;
  /** RegularExpression Id. */
  int EVENT = 36;
  /** RegularExpression Id. */
  int EXPLICIT = 37;
  /** RegularExpression Id. */
  int EXTERN = 38;
  /** RegularExpression Id. */
  int FINALLY = 39;
  /** RegularExpression Id. */
  int FIXED = 40;
  /** RegularExpression Id. */
  int FLOAT = 41;
  /** RegularExpression Id. */
  int FOR = 42;
  /** RegularExpression Id. */
  int FOREACH = 43;
  /** RegularExpression Id. */
  int GOTO = 44;
  /** RegularExpression Id. */
  int IF = 45;
  /** RegularExpression Id. */
  int IMPLICIT = 46;
  /** RegularExpression Id. */
  int IN = 47;
  /** RegularExpression Id. */
  int INT = 48;
  /** RegularExpression Id. */
  int INTERFACE = 49;
  /** RegularExpression Id. */
  int INTERNAL = 50;
  /** RegularExpression Id. */
  int IS = 51;
  /** RegularExpression Id. */
  int LOCK = 52;
  /** RegularExpression Id. */
  int LONG = 53;
  /** RegularExpression Id. */
  int NAMESPACE = 54;
  /** RegularExpression Id. */
  int NEW = 55;
  /** RegularExpression Id. */
  int OBJECT = 56;
  /** RegularExpression Id. */
  int OPERATOR = 57;
  /** RegularExpression Id. */
  int OUT = 58;
  /** RegularExpression Id. */
  int OVERRIDE = 59;
  /** RegularExpression Id. */
  int PARAMS = 60;
  /** RegularExpression Id. */
  int PRIVATE = 61;
  /** RegularExpression Id. */
  int PROTECTED = 62;
  /** RegularExpression Id. */
  int PUBLIC = 63;
  /** RegularExpression Id. */
  int READONLY = 64;
  /** RegularExpression Id. */
  int REF = 65;
  /** RegularExpression Id. */
  int RETURN = 66;
  /** RegularExpression Id. */
  int SBYTE = 67;
  /** RegularExpression Id. */
  int SEALED = 68;
  /** RegularExpression Id. */
  int SHORT = 69;
  /** RegularExpression Id. */
  int SIZEOF = 70;
  /** RegularExpression Id. */
  int STACKALLOC = 71;
  /** RegularExpression Id. */
  int STATIC = 72;
  /** RegularExpression Id. */
  int STRING = 73;
  /** RegularExpression Id. */
  int STRUCT = 74;
  /** RegularExpression Id. */
  int SWITCH = 75;
  /** RegularExpression Id. */
  int THIS = 76;
  /** RegularExpression Id. */
  int THROW = 77;
  /** RegularExpression Id. */
  int TRY = 78;
  /** RegularExpression Id. */
  int TYPEOF = 79;
  /** RegularExpression Id. */
  int UINT = 80;
  /** RegularExpression Id. */
  int ULONG = 81;
  /** RegularExpression Id. */
  int UNCHECKED = 82;
  /** RegularExpression Id. */
  int UNSAFE = 83;
  /** RegularExpression Id. */
  int USHORT = 84;
  /** RegularExpression Id. */
  int USING = 85;
  /** RegularExpression Id. */
  int VIRTUAL = 86;
  /** RegularExpression Id. */
  int VOID = 87;
  /** RegularExpression Id. */
  int VOLATILE = 88;
  /** RegularExpression Id. */
  int WHILE = 89;
  /** RegularExpression Id. */
  int ID = 90;
  /** RegularExpression Id. */
  int ASCII_ESCAPE = 91;
  /** RegularExpression Id. */
  int HEX_ESCAPE = 92;
  /** RegularExpression Id. */
  int OCTAL_ESCAPE = 93;
  /** RegularExpression Id. */
  int UNICODE4 = 94;
  /** RegularExpression Id. */
  int UNICODE8 = 95;
  /** RegularExpression Id. */
  int VERBATIM_STRING = 96;
  /** RegularExpression Id. */
  int STRING_LITERAL = 97;
  /** RegularExpression Id. */
  int PLUS = 98;
  /** RegularExpression Id. */
  int MINUS = 99;
  /** RegularExpression Id. */
  int MULT = 100;
  /** RegularExpression Id. */
  int DIV = 101;
  /** RegularExpression Id. */
  int ASSIGN = 102;
  /** RegularExpression Id. */
  int EQ = 103;
  /** RegularExpression Id. */
  int NEQ = 104;
  /** RegularExpression Id. */
  int LT = 105;
  /** RegularExpression Id. */
  int GT = 106;
  /** RegularExpression Id. */
  int LTE = 107;
  /** RegularExpression Id. */
  int GTE = 108;
  /** RegularExpression Id. */
  int AND = 109;
  /** RegularExpression Id. */
  int OR = 110;
  /** RegularExpression Id. */
  int NOT = 111;
  /** RegularExpression Id. */
  int BITAND = 112;
  /** RegularExpression Id. */
  int BITOR = 113;
  /** RegularExpression Id. */
  int BITXOR = 114;
  /** RegularExpression Id. */
  int BITNOT = 115;
  /** RegularExpression Id. */
  int QUESTION = 116;
  /** RegularExpression Id. */
  int COLON = 117;
  /** RegularExpression Id. */
  int NULL_COND = 118;
  /** RegularExpression Id. */
  int NULL_COALESCE = 119;
  /** RegularExpression Id. */
  int LAMBDA = 120;
  /** RegularExpression Id. */
  int INCR = 121;
  /** RegularExpression Id. */
  int DECR = 122;
  /** RegularExpression Id. */
  int ARROW = 123;
  /** RegularExpression Id. */
  int LPAREN = 124;
  /** RegularExpression Id. */
  int RPAREN = 125;
  /** RegularExpression Id. */
  int LBRACE = 126;
  /** RegularExpression Id. */
  int RBRACE = 127;
  /** RegularExpression Id. */
  int LBRACKET = 128;
  /** RegularExpression Id. */
  int RBRACKET = 129;
  /** RegularExpression Id. */
  int COMMA = 130;
  /** RegularExpression Id. */
  int DOT = 131;
  /** RegularExpression Id. */
  int SEMI = 132;
  /** RegularExpression Id. */
  int DOUBLE_COLON = 133;
  /** RegularExpression Id. */
  int ELLIPSIS = 134;
  /** RegularExpression Id. */
  int PRE_IF = 135;
  /** RegularExpression Id. */
  int PRE_ELSE = 136;
  /** RegularExpression Id. */
  int PRE_ENDIF = 137;
  /** RegularExpression Id. */
  int PRE_REGION = 138;
  /** RegularExpression Id. */
  int PRE_ENDREGION = 139;
  /** RegularExpression Id. */
  int PRE_LINE = 140;
  /** RegularExpression Id. */
  int PRE_ERROR = 141;
  /** RegularExpression Id. */
  int PRE_WARNING = 142;
  /** RegularExpression Id. */
  int PRE_DEFINE = 143;
  /** RegularExpression Id. */
  int PRE_UNDEF = 144;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\f\"",
    "\"\\r\"",
    "<COMMENT_BLOCK>",
    "<LINE_COMMENT>",
    "<XML_COMMENT>",
    "\"true\"",
    "\"false\"",
    "\"null\"",
    "<BINARY_INTEGER>",
    "<DECIMAL_INTEGER>",
    "<OCTAL_INTEGER>",
    "<HEXADECIMAL_INTEGER>",
    "\"abstract\"",
    "\"as\"",
    "\"base\"",
    "\"bool\"",
    "\"break\"",
    "\"byte\"",
    "\"case\"",
    "\"catch\"",
    "\"char\"",
    "\"checked\"",
    "\"class\"",
    "\"const\"",
    "\"continue\"",
    "\"decimal\"",
    "\"default\"",
    "\"delegate\"",
    "\"do\"",
    "\"double\"",
    "\"else\"",
    "\"enum\"",
    "\"event\"",
    "\"explicit\"",
    "\"extern\"",
    "\"finally\"",
    "\"fixed\"",
    "\"float\"",
    "\"for\"",
    "\"foreach\"",
    "\"goto\"",
    "\"if\"",
    "\"implicit\"",
    "\"in\"",
    "\"int\"",
    "\"interface\"",
    "\"internal\"",
    "\"is\"",
    "\"lock\"",
    "\"long\"",
    "\"namespace\"",
    "\"new\"",
    "\"object\"",
    "\"operator\"",
    "\"out\"",
    "\"override\"",
    "\"params\"",
    "\"private\"",
    "\"protected\"",
    "\"public\"",
    "\"readonly\"",
    "\"ref\"",
    "\"return\"",
    "\"sbyte\"",
    "\"sealed\"",
    "\"short\"",
    "\"sizeof\"",
    "\"stackalloc\"",
    "\"static\"",
    "\"string\"",
    "\"struct\"",
    "\"switch\"",
    "\"this\"",
    "\"throw\"",
    "\"try\"",
    "\"typeof\"",
    "\"uint\"",
    "\"ulong\"",
    "\"unchecked\"",
    "\"unsafe\"",
    "\"ushort\"",
    "\"using\"",
    "\"virtual\"",
    "\"void\"",
    "\"volatile\"",
    "\"while\"",
    "<ID>",
    "<ASCII_ESCAPE>",
    "<HEX_ESCAPE>",
    "<OCTAL_ESCAPE>",
    "<UNICODE4>",
    "<UNICODE8>",
    "<VERBATIM_STRING>",
    "<STRING_LITERAL>",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"=\"",
    "\"==\"",
    "\"!=\"",
    "\"<\"",
    "\">\"",
    "\"<=\"",
    "\">=\"",
    "\"&&\"",
    "\"||\"",
    "\"!\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"?.\"",
    "\"??\"",
    "\"=>\"",
    "\"++\"",
    "\"--\"",
    "\"->\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\",\"",
    "\".\"",
    "\";\"",
    "\"::\"",
    "\"...\"",
    "\"#if\"",
    "\"#else\"",
    "\"#endif\"",
    "\"#region\"",
    "\"#endregion\"",
    "\"#line\"",
    "\"#error\"",
    "\"#warning\"",
    "\"#define\"",
    "\"#undef\"",
  };

}

// Laboratório - Análise Léxica C#
// Aluno: Thiago Evangelista dos Santos

PARSER_BEGIN(lexico_csharp)

import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Field;
import java.util.HashMap;

public class lexico_csharp {
    public static HashMap<Integer, String> tokenNames;

    public static void initializeTokenNames() {
        tokenNames = new HashMap<Integer, String>();
        Field[] fields = lexico_csharpConstants.class.getDeclaredFields();
        for (Field field : fields) {
            if (field.getType() == int.class) {
                try {
                    int value = field.getInt(null);
                    String name = field.getName();
                    tokenNames.put(value, name);
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public static void main(String[] args) throws ParseException, IOException {
        lexico_csharp parser = new lexico_csharp(System.in);
        initializeTokenNames();
        FileWriter writer = new FileWriter("saida_csharp_tokens.txt");

        while (true) {
            Token t = parser.getNextToken();
            if (t.kind == EOF) break;
            String tokenName = tokenNames.get(t.kind);
            String output = tokenName + " " + t.image;
            System.out.println(output);
            writer.write(output + "\n");
        }
        writer.close();
    }
}

PARSER_END(lexico_csharp)


SKIP :
{
  " " | "\t" | "\n" | "\f" | "\r" |
  < COMMENT_BLOCK : "/*" (~["*"] | "*" ~["/"])* "*" "/" > |
  < LINE_COMMENT : "//" (~["\n", "\r"])* >
}


TOKEN :
{
// Tratamento de diretivas de pré-processador
  < PRE_DEFINE: "#define" > |
  < PRE_UNDEF: "#undef" > |
  < PRE_IF: "#if" > |
  < PRE_ELIF: "#elif" > |
  < PRE_ELSE: "#else" > |
  < PRE_ENDIF: "#endif" > |
  < PRE_LINE: "#line" > |
  < PRE_ERROR: "#error" > |
  < PRE_REGION: "#region" > |
  < PRE_ENDREGION: "#endregion" > |
  < PRE_NULLABLE: "#nullable" > |
  < PRE_PRAGMA: "#pragma" > |


// Literais Booleanos
  < TRUE:  "true" > |
  < FALSE: "false" > |


// Literal Nulo
  < NULL:  "null" > |


// Literais Numericos Inteiros
  < #DECORATED_DIGIT: (("_")*["0"-"9"])* > |
  < #INTEGER_SUFIX: ("UL" | "Ul" | "uL" | "ul" | "LU" | "Lu" | "lU" | "lu" )? ( "U" | "u" )? ("L" | "l" )? > |
  < BINARY_INTEGER: "0" ["b", "B"] (("_")* ["0", "1"])+ <INTEGER_SUFIX> > |
  < DECIMAL_INTEGER: ("0")? | (["1"-"9"] <DECORATED_DIGIT> ) <INTEGER_SUFIX> > |
  < HEXADECIMAL_INTEGER: "0" ["x", "X"] (("_")*["0"-"9", "a"-"f", "A"-"F"])+ <INTEGER_SUFIX> > |

// Literal Numerico Real
  < REAL_LITERAL:
      (
          ( ["0"-"9"] <DECORATED_DIGIT> )? "." ["0"-"9"] <DECORATED_DIGIT> ( ["e","E"] (["+","-"])? ["0"-"9"] <DECORATED_DIGIT> )?
          |
          ["0"-"9"] <DECORATED_DIGIT> ( ["e","E"] (["+","-"])? ["0"-"9"] <DECORATED_DIGIT> )
      )
      ( ["f","F","d","D","m","M"] )?
      |
      ["0"-"9"] <DECORATED_DIGIT> ( ["f","F","d","D","m","M"] )
  > |

// Palavras Reservadas
  < ABSTRACT: "abstract" > |
  < AS: "as" > |
  < BASE: "base" > |
  < BOOL: "bool" > |
  < BREAK: "break" > |
  < BYTE: "byte" > |
  < CASE: "case" > |
  < CATCH: "catch" > |
  < CHAR: "char" > |
  < CHECKED: "checked" > |
  < CLASS: "class" > |
  < CONST: "const" > |
  < CONTINUE: "continue" > |
  < DECIMAL: "decimal" > |
  < KWDEFAULT: "default" > | // Não aceita a palavra DEFAULT como tokenname
  < DELEGATE: "delegate" > |
  < DO: "do" > |
  < DOUBLE: "double" > |
  < ELSE: "else" > |
  < ENUM: "enum" > |
  < EVENT: "event" > |
  < EXPLICIT: "explicit" > |
  < EXTERN: "extern" > |
  < FINALLY: "finally" > |
  < FIXED: "fixed" > |
  < FLOAT: "float" > |
  < FOR: "for" > |
  < FOREACH: "foreach" > |
  < GOTO: "goto" > |
  < IF: "if" > |
  < IMPLICIT: "implicit" > |
  < IN: "in" > |
  < INT: "int" > |
  < INTERFACE: "interface" > |
  < INTERNAL: "internal" > |
  < IS: "is" > |
  < LOCK: "lock" > |
  < LONG: "long" > |
  < NAMESPACE: "namespace" > |
  < NEW: "new" > |
  < OBJECT: "object" > |
  < OPERATOR: "operator" > |
  < OUT: "out" > |
  < OVERRIDE: "override" > |
  < PARAMS: "params" > |
  < PRIVATE: "private" > |
  < PROTECTED: "protected" > |
  < PUBLIC: "public" > |
  < READONLY: "readonly" > |
  < REF: "ref" > |
  < RETURN: "return" > |
  < SBYTE: "sbyte" > |
  < SEALED: "sealed" > |
  < SHORT: "short" > |
  < SIZEOF: "sizeof" > |
  < STACKALLOC: "stackalloc" > |
  < STATIC: "static" > |
  < STRING: "string" > |
  < STRUCT: "struct" > |
  < SWITCH: "switch" > |
  < THIS: "this" > |
  < THROW: "throw" > |
  < TRY: "try" > |
  < TYPEOF: "typeof" > |
  < UINT: "uint" > |
  < ULONG: "ulong" > |
  < UNCHECKED: "unchecked" > |
  < UNSAFE: "unsafe" > |
  < USHORT: "ushort" > |
  < USING: "using" > |
  < VIRTUAL: "virtual" > |
  < VOID: "void" > |
  < VOLATILE: "volatile" > |
  < WHILE: "while" > |


// Palavras Reservadas Contextuais
  < ADD: "add" > |
  < ALIAS: "alias" > |
  < ASCENDING: "ascending" > |
  < ASYNC: "async" > |
  < AWAIT: "await" > |
  < BY: "by" > |
  < DESCENDING: "descending" > |
  < DYNAMIC: "dynamic" > |
  < EQUALS: "equals" > |
  < FROM: "from" > |
  < GET: "get" > |
  < GLOBAL: "global" > |
  < GROUP: "group" > |
  < INTO: "into" > |
  < JOIN: "join" > |
  < LET: "let" > |
  < NAMEOF: "nameof" > |
  < NOTNULL: "notnull" > |
  < ON: "on" > |
  < ORDERBY: "orderby" > |
  < PARTIAL: "partial" > |
  < REMOVE: "remove" > |
  < SELECT: "select" > |
  < SET: "set" > |
  < UNMANAGED: "unmanaged" > |
  < VALUE: "value" > |
  < VAR: "var" > |
  < WHEN: "when" > |
  < WHERE: "where" > |
  < YIELD: "yield" > |


// Auxiliares de escape
  < #ASCII_ESCAPE: "\\" ["n","t","v","b","r","f","0","a","'", "\"","\\"] > |
  < #HEX_ESCAPE: "\\x" (["0"-"9","a"-"f","A"-"F"])+ > |
  < #OCTAL_ESCAPE: "\\" ["0"-"7"] (["0"-"7"]){0,2} > |
  < #UNICODE4: "\\u" (["0"-"9","a"-"f","A"-"F"]){4} > |
  < #UNICODE8: "\\U" (["0"-"9","a"-"f","A"-"F"]){8} > |


// Char Literal
  < CHAR_LITERAL:
    "'" ( ~["'", "\\", "\n", "\r"]
      | <ASCII_ESCAPE> | <HEX_ESCAPE> | <UNICODE4> | <UNICODE8>                
    ) "'" > |


// Verbatim string: 
  < VERBATIM_STRING: "@\"" ( ~["\""] | "\"\"" )* "\"" > |


// String literal 
  < STRING_LITERAL:
    "\"" ( ~["\"", "\\", "\n"] 
      | <ASCII_ESCAPE> | <HEX_ESCAPE> | <UNICODE4> | <UNICODE8>
    )*  "\"" > |


// String literal interpolada
  < INTERPOLATED_LITERAL_STRING:
      "$\"" 
      (
        ( ~["\\", "{", "\"", "\n", "\r"] 
          | <ASCII_ESCAPE> | <HEX_ESCAPE> | <UNICODE4> | <UNICODE8>
          | "{{" | "}}" | "\\\"" 
        )*
        ( "{" (~["}", "\n", "\r"])* "}"
          ( ~["\\", "{", "\"", "\n", "\r"] 
            | <ASCII_ESCAPE> | <HEX_ESCAPE> | <UNICODE4> | <UNICODE8>
            | "{{" | "}}" | "\\\"" 
          )*
        )*
      )
      "\""
  > |


// String verbatim interpolada $@ ou @$
  < INTERPOLATED_VERBATIM_STRING:
      ( "$@\"" | "@$\"" )
      (
        ( ~["{", "\""] | "\"\"" | "{{" | "}}" )*
        (
          "{" (~["}"])* "}"
          ( ~["{", "\""] | "\"\"" | "{{" | "}}" )*
        )*
      )
      "\""
  > |


// Operadores e Pontuação
  < PLUS: "+" > | < MINUS: "-" > | < MULT: "*" > | < DIV: "/" > |
  < ASSIGN: "=" > | < EQ: "==" > | < NEQ: "!=" > |
  < LT: "<" > | < GT: ">" > | < LTE: "<=" > | < GTE: ">=" > |
  < AND: "&&" > | < OR: "||" > | < NOT: "!" > |
  < BITAND: "&" > | < BITOR: "|" > | < BITXOR: "^" > | < BITNOT: "~" > |
  < QUESTION: "?" > | < COLON: ":" > | < NULL_COND: "?." > |
  < NULL_COALESCE: "??" > | < LAMBDA: "=>" > |
  < INCR: "++" > | < DECR: "--" > | < ARROW: "->" > |


// Pontuadores
  < LPAREN: "(" > | < RPAREN: ")" > |
  < LBRACE: "{" > | < RBRACE: "}" > |
  < LBRACKET: "[" > | < RBRACKET: "]" > |
  < COMMA: "," > | < DOT: "." > | < SEMI: ";" > |
  < DOUBLE_COLON: "::" > | < ELLIPSIS: "..." > |


// Identificadores
  < #SIMPLE_ID: ( ["a"-"z","A"-"Z","_"] | <UNICODE4> | <UNICODE8> ) ( ["a"-"z","A"-"Z","0"-"9","_"] | <UNICODE4> | <UNICODE8> )* > |
  < #ESCAPED_ID: "@" <SIMPLE_ID> > |
  < ID: <SIMPLE_ID> | <ESCAPED_ID> > 

}

USING using
ID System
SEMI ;
CLASS class
ID Program
LBRACE {
STATIC static
DOUBLE double
ID Func
LPAREN (
DOUBLE double
LBRACKET [
RBRACKET ]
LBRACKET [
RBRACKET ]
ID v
COMMA ,
INT int
ID n
RPAREN )
LBRACE {
IF if
LPAREN (
ID n
LTE <=
LITERAL_INTEGER 0
RPAREN )
LBRACE {
RETURN return
REAL_LITERAL 1.0
SEMI ;
RBRACE }
ELSE else
IF if
LPAREN (
ID n
EQ ==
LITERAL_INTEGER 1
RPAREN )
LBRACE {
RETURN return
REAL_LITERAL 1.01
PLUS +
ID v
LBRACKET [
LITERAL_INTEGER 0
RBRACKET ]
LBRACKET [
LITERAL_INTEGER 0
RBRACKET ]
DIV /
REAL_LITERAL 1e2
PLUS +
ID v
LBRACKET [
LITERAL_INTEGER 0
RBRACKET ]
LBRACKET [
LITERAL_INTEGER 1
RBRACKET ]
DIV /
REAL_LITERAL 0.001
SEMI ;
RBRACE }
DOUBLE double
ID res
ASSIGN =
REAL_LITERAL 0.25e-13
SEMI ;
INT int
ID i
ASSIGN =
ID n
MINUS -
LITERAL_INTEGER 1
SEMI ;
WHILE while
LPAREN (
ID i
GTE >=
LITERAL_INTEGER 0
AND &&
ID v
LBRACKET [
ID i
RBRACKET ]
LBRACKET [
LITERAL_INTEGER 0
RBRACKET ]
GTE >=
LITERAL_INTEGER 0
RPAREN )
LBRACE {
DOUBLE double
ID temp
ASSIGN =
ID v
LBRACKET [
ID i
RBRACKET ]
LBRACKET [
LITERAL_INTEGER 1
RBRACKET ]
MULT *
ID v
LBRACKET [
ID i
RBRACKET ]
LBRACKET [
LITERAL_INTEGER 0
RBRACKET ]
MOD %
LITERAL_INTEGER 123
SEMI ;
IF if
LPAREN (
ID temp
LT <
REAL_LITERAL 0.0
RPAREN )
LBRACE {
ID res
ASSIGN =
ID res
MULT *
REAL_LITERAL 0.02
PLUS +
ID Func
LPAREN (
ID v
COMMA ,
ID n
MINUS -
LITERAL_INTEGER 1
RPAREN )
MULT *
ID temp
SEMI ;
RBRACE }
ELSE else
LBRACE {
ID res
ASSIGN =
ID res
MULT *
LITERAL_INTEGER 300
PLUS +
ID Func
LPAREN (
ID v
COMMA ,
ID n
MINUS -
LITERAL_INTEGER 2
RPAREN )
MULT *
ID temp
SEMI ;
ID Console
DOT .
ID WriteLine
LPAREN (
LITERAL_STRING "Estranho, ne?"
RPAREN )
SEMI ;
RBRACE }
ID i
ASSIGN =
ID i
MINUS -
LITERAL_INTEGER 1
SEMI ;
RBRACE }
RETURN return
ID res
SEMI ;
RBRACE }
STATIC static
VOID void
ID Main
LPAREN (
RPAREN )
LBRACE {
DOUBLE double
LBRACKET [
RBRACKET ]
LBRACKET [
RBRACKET ]
ID pontos
ASSIGN =
NEW new
DOUBLE double
LBRACKET [
RBRACKET ]
LBRACKET [
RBRACKET ]
LBRACE {
NEW new
DOUBLE double
LBRACKET [
RBRACKET ]
LBRACE {
LITERAL_INTEGER 5
COMMA ,
LITERAL_INTEGER 10
RBRACE }
COMMA ,
NEW new
DOUBLE double
LBRACKET [
RBRACKET ]
LBRACE {
LITERAL_INTEGER 2
COMMA ,
LITERAL_INTEGER 3
RBRACE }
COMMA ,
NEW new
DOUBLE double
LBRACKET [
RBRACKET ]
LBRACE {
MINUS -
LITERAL_INTEGER 1
COMMA ,
LITERAL_INTEGER 4
RBRACE }
RBRACE }
SEMI ;
DOUBLE double
LBRACKET [
RBRACKET ]
ID teste
SEMI ;
ID teste
ASSIGN =
NEW new
DOUBLE double
LBRACKET [
LITERAL_INTEGER 3
RBRACKET ]
SEMI ;
DOUBLE double
ID resultado
ASSIGN =
ID Func
LPAREN (
ID pontos
COMMA ,
ID pontos
DOT .
ID Length
RPAREN )
SEMI ;
ID Console
DOT .
ID WriteLine
LPAREN (
LITERAL_STRING "Resultado: "
PLUS +
ID resultado
RPAREN )
SEMI ;
RBRACE }
RBRACE }
$ $
